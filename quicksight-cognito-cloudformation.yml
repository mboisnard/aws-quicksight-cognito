Resources:

#### Lambda ####
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: quicksight-cognito-lambda-execution-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - cognito-identity:GetId
                  - cognito-identity:GetOpenIdToken
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'
          PolicyName: quicksight-cognito-execution-policy
  
  QuicksightCognitoFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: quicksight-cognito-lambda
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = function(event, context) {
            console.log('upload quicksight cognito code');
          };
      Environment:
        Variables:
          COGNITO_IDENTITY_POOL_ID: poolId
          COGNITO_USER_POOL_URL: poolUrl
          STS_ROLE_ARN_TO_ASSUME: roleToAssume
          QUICKSIGHT_REGION: region
          QUICKSIGHT_DASHBOARD_ID: dashboardId
          AWS_ACCOUNT_ID: accountId
#### ####

#### API Gateway ####
  APIGatewayHttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: quicksight-cognito-api-gateway
      Description: Quicksight Cognito API forward to lambda
      ProtocolType: HTTP

  APIGatewayLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref APIGatewayHttpApi
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: 2.0
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QuicksightCognitoFunction.Arn}/invocations'

  APIGatewayLambdaProxyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref APIGatewayHttpApi
      RouteKey: 'ANY /quicksight-cognito/{proxy+}'
      Target: !Join
        - /
        - - integrations
          - !Ref APIGatewayLambdaIntegration

  APIGatewayDevStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Dev
      Description: Dev Stage
      AutoDeploy: true
      ApiId: !Ref APIGatewayHttpApi
#### ####

#### Cognito ####

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: quicksight-cognito-user-pool

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: quicksight-cognito-web-app
      AccessTokenValidity: 1 # eq 1 hour
      IdTokenValidity: 1 # eq 1 hour
      RefreshTokenValidity: 1 # eq 1 day
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - email
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost:8080/callback
      GenerateSecret: true
      SupportedIdentityProviders:
        - COGNITO
