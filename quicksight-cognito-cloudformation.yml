Resources:

#### Lambda ####
  # You can use AWS::Serverless::Function task to wrap IAM execution role & Lambda Function creation inside only one task

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: quicksight-cognito-lambda-execution-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - cognito-identity:GetId
                  - cognito-identity:GetOpenIdToken
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'
          PolicyName: quicksight-cognito-execution-policy
  
  QuicksightCognitoFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: quicksight-cognito-lambda
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          exports.handler = function(event, context) {
            console.log('upload quicksight cognito code & update nodejs version to nodejs14.x');
          };
      Environment:
        Variables:
          COGNITO_IDENTITY_POOL_ID: !Ref CognitoIdentityPool
          COGNITO_USER_POOL_URL: !GetAtt CognitoUserPool.ProviderURL
          STS_ROLE_ARN_TO_ASSUME: !GetAtt ConnectedUserRoleToAssume.Arn
          QUICKSIGHT_REGION: !Ref 'AWS::Region'
          QUICKSIGHT_DASHBOARD_ID: dashboardId
          AWS_ACCOUNT_ID: !Ref 'AWS::AccountId'

  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt QuicksightCognitoFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
#### ####

#### API Gateway ####
  APIGatewayHttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: quicksight-cognito-api-gateway
      Description: Quicksight Cognito API forward to lambda
      ProtocolType: HTTP

  APIGatewayLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref APIGatewayHttpApi
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: 2.0
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${QuicksightCognitoFunction.Arn}/invocations'
      RequestParameters:
        'overwrite:path': '$request.path' # Remove any stage name from path

  APIGatewayLambdaProxyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref APIGatewayHttpApi
      RouteKey: 'ANY /quicksight-cognito/{proxy+}'
      Target: !Join
        - /
        - - integrations
          - !Ref APIGatewayLambdaIntegration

  APIGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: api-gateway-log-grp
      RetentionInDays: 1

  APIGatewayDevStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Dev
      Description: Dev Stage
      AccessLogSettings:
        DestinationArn: !GetAtt APIGatewayLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength", "integrationError":"$context.integrationErrorMessage" }'
      AutoDeploy: true
      ApiId: !Ref APIGatewayHttpApi
#### ####

#### Cognito ####
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: quicksight-cognito-user-pool

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: quicksight-cognito-web-app
      AccessTokenValidity: 1 # eq 1 hour
      IdTokenValidity: 1 # eq 1 hour
      RefreshTokenValidity: 1 # eq 1 day
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - email
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost:8080/callback
      GenerateSecret: true
      SupportedIdentityProviders:
        - COGNITO

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: false
      IdentityPoolName: quicksight-cognito-identity-pool
      CognitoIdentityProviders:
        - ProviderName: !GetAtt CognitoUserPool.ProviderName
          ClientId: !Ref CognitoUserPoolClient

  CognitoIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        "authenticated": !GetAtt CognitoAuthenticatedRole.Arn
        "unauthenticated": !GetAtt CognitoUnAuthenticatedRole.Arn

  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: cognito-auth-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition: { "ForAnyValue:StringLike": { "cognito-identity.amazonaws.com:amr": "authenticated" },  "StringEquals": { "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool } }
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                  - cognito-identity:*
                  - sts:AssumeRole
                  #- sts:AssumeRoleWithWebIdentity
                Effect: Allow
                Resource: '*'
          PolicyName: cognito-auth-policy

  CognitoUnAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: cognito-unauth-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition: { "ForAnyValue:StringLike": { "cognito-identity.amazonaws.com:amr": "unauthenticated" },  "StringEquals": { "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool } }
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                Effect: Allow
                Resource: '*'
          PolicyName: cognito-unauth-policy
#### ####

#### Quicksight ####
  ConnectedUserRoleToAssume:
    Type: AWS::IAM::Role
    Properties:
      RoleName: cognito-quicksight-assumed-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - quicksight:RegisterUser
                  - quicksight:GetDashboardEmbedUrl
                Effect: Allow
                Resource: '*'
          PolicyName: cognito-quicksight-assumed-policy
#### ####
